import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, TextInput, StyleSheet, ScrollView, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// –ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
const initialDishes = [
  { name: "–û–ª–∏–≤—å–µ", difficulties: [4, 5] },
  { name: "–ë–æ—Ä—â", difficulties: [4, 5] },
  { name: "–ì—Ä–µ—á–∫–∞ –ø–æ –∫—É–ø–µ—á–µ—Å–∫–∏", difficulties: [3, 4] },
  { name: "–ö–∞—Ä—Ç–æ—à–∫–∞ –ø—é—Ä–µ —Å –∫–æ—Ç–ª–µ—Ç–∞–º–∏", difficulties: [3, 4] },
  { name: "–û–º–ª–µ—Ç", difficulties: [1, 2] },
  { name: "–ë—É—Ç–µ—Ä–±—Ä–æ–¥", difficulties: [1] }
];

// –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ AsyncStorage
const STORAGE_KEY = '@dinner_chooser_dishes';

export default function App() {
  const [mood, setMood] = useState(null);
  const [selectedDish, setSelectedDish] = useState(null);
  const [dishes, setDishes] = useState([]);
  const [newDishName, setNewDishName] = useState('');
  const [selectedDifficulties, setSelectedDifficulties] = useState([]);
  const [showAddForm, setShowAddForm] = useState(false);
  const [showDishesList, setShowDishesList] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    loadDishes();
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
  useEffect(() => {
    if (!isLoading) {
      saveDishes();
    }
  }, [dishes, isLoading]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–ª—é–¥ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const loadDishes = async () => {
    try {
      const savedDishes = await AsyncStorage.getItem(STORAGE_KEY);
      if (savedDishes !== null) {
        setDishes(JSON.parse(savedDishes));
      } else {
        setDishes(initialDishes);
      }
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥');
      setDishes(initialDishes);
    } finally {
      setIsLoading(false);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–ª—é–¥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  const saveDishes = async () => {
    try {
      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(dishes));
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥');
    }
  };

  // –°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É
  const resetToDefault = () => {
    Alert.alert(
      '–°–±—Ä–æ—Å —Å–ø–∏—Å–∫–∞',
      '–í–µ—Ä–Ω—É—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–ª—é–¥? –¢–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { 
          text: '–°–±—Ä–æ—Å–∏—Ç—å', 
          style: 'destructive',
          onPress: () => setDishes(initialDishes)
        }
      ]
    );
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const toggleDifficulty = (difficulty) => {
    setSelectedDifficulties(prev => 
      prev.includes(difficulty) 
        ? prev.filter(d => d !== difficulty)
        : [...prev, difficulty]
    );
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞ —Å –∫–∞—Å–∫–∞–¥–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –¥–ª—è 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const chooseDinner = () => {
    if (!mood) return;

    let availableDishes = [];
    const random = Math.random();
    
    // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    if (mood === 1) {
      // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 1: 90% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 1, 10% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 2
      if (random < 0.9) {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(1));
      } else {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(2));
      }
    } else if (mood === 2) {
      // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 2: 80% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 2, 20% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 1 –∏–ª–∏ 3
      if (random < 0.8) {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(2));
      } else if (random < 0.9) {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(1));
      } else {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(3));
      }
    } else if (mood === 3) {
      // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 3: 70% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 3, 20% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 2, 10% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 4
      if (random < 0.7) {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(3));
      } else if (random < 0.9) {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(2));
      } else {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(4));
      }
    } else if (mood === 4) {
      // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 4: 70% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 4, 20% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 3, 10% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 5
      if (random < 0.7) {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(4));
      } else if (random < 0.9) {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(3));
      } else {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(5));
      }
    } else if (mood === 5) {
      // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 5: 80% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 5, 20% —Å–ª–æ–∂–Ω–æ—Å—Ç—å 4
      if (random < 0.8) {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(5));
      } else {
        availableDishes = dishes.filter(dish => dish.difficulties.includes(4));
      }
    }

    // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç –±–ª—é–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (availableDishes.length === 0) {
      availableDishes = dishes.filter(dish => dish.difficulties.some(d => d <= mood));
    }

    if (availableDishes.length === 0) {
      availableDishes = dishes;
    }

    if (availableDishes.length > 0) {
      const randomIndex = Math.floor(Math.random() * availableDishes.length);
      setSelectedDish(availableDishes[randomIndex]);
    } else {
      Alert.alert('–ù–µ—Ç –±–ª—é–¥', '–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –≤ —Å–ø–∏—Å–æ–∫');
    }
  };

  const addDish = () => {
    if (!newDishName.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞');
      return;
    }

    if (selectedDifficulties.length === 0) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –±–ª—é–¥–∞
    const dishExists = dishes.some(dish => 
      dish.name.toLowerCase() === newDishName.trim().toLowerCase()
    );

    if (dishExists) {
      Alert.alert('–û—à–∏–±–∫–∞', '–¢–∞–∫–æ–µ –±–ª—é–¥–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ');
      return;
    }

    const newDish = {
      name: newDishName.trim(),
      difficulties: [...selectedDifficulties].sort()
    };

    setDishes([...dishes, newDish]);
    setNewDishName('');
    setSelectedDifficulties([]);
    setShowAddForm(false);
  };

  const removeDish = (index) => {
    Alert.alert(
      '–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ',
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "${dishes[index].name}"?`,
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { 
          text: '–£–¥–∞–ª–∏—Ç—å', 
          style: 'destructive',
          onPress: () => {
            const newDishes = dishes.filter((_, i) => i !== index);
            setDishes(newDishes);
          }
        }
      ]
    );
  };

  if (isLoading) {
    return (
      <View style={styles.container}>
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>üçΩÔ∏è –í—ã–±–æ—Ä —É–∂–∏–Ω–∞</Text>
      
      {/* –í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è */}
      <Text style={styles.subtitle}>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–∫–∏:</Text>
      <View style={styles.moodButtons}>
        {[1, 2, 3, 4, 5].map(num => (
          <TouchableOpacity
            key={num}
            style={[styles.moodButton, mood === num && styles.selectedMood]}
            onPress={() => setMood(num)}
          >
            <Text style={styles.moodText}>{num}</Text>
          </TouchableOpacity>
        ))}
      </View>

      {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —É–∂–∏–Ω–∞ */}
      <TouchableOpacity
        style={[styles.chooseButton, !mood && styles.disabledButton]}
        onPress={chooseDinner}
        disabled={!mood}
      >
        <Text style={styles.chooseText}>–í–´–ë–†–ê–¢–¨ –£–ñ–ò–ù</Text>
      </TouchableOpacity>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
      {selectedDish && (
        <View style={styles.result}>
          <Text style={styles.resultTitle}>–°–µ–≥–æ–¥–Ω—è –≥–æ—Ç–æ–≤–∏–º:</Text>
          <Text style={styles.dishName}>üçΩÔ∏è {selectedDish.name}</Text>
          <Text style={styles.difficulty}>
            –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {selectedDish.difficulties.join(', ')}
          </Text>
        </View>
      )}

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –±–ª—é–¥ */}
      <View style={styles.managementSection}>
        <TouchableOpacity 
          style={styles.managementButton}
          onPress={() => setShowAddForm(!showAddForm)}
        >
          <Text style={styles.managementButtonText}>
            {showAddForm ? '‚úï –û—Ç–º–µ–Ω–∞' : '+ –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ'}
          </Text>
        </TouchableOpacity>

        <TouchableOpacity 
          style={styles.managementButton}
          onPress={() => setShowDishesList(!showDishesList)}
        >
          <Text style={styles.managementButtonText}>
            {showDishesList ? '‚ñº –°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫' : '‚ñ∫ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫'} ({dishes.length})
          </Text>
        </TouchableOpacity>
      </View>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ */}
      <TouchableOpacity 
        style={styles.resetButton}
        onPress={resetToDefault}
      >
        <Text style={styles.resetButtonText}>üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É</Text>
      </TouchableOpacity>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      {showAddForm && (
        <View style={styles.addForm}>
          <TextInput
            style={styles.input}
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"
            value={newDishName}
            onChangeText={setNewDishName}
          />
          <Text style={styles.difficultyLabel}>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</Text>
          <Text style={styles.difficultyHint}>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ</Text>
          <View style={styles.difficultyButtons}>
            {[1, 2, 3, 4, 5].map(num => (
              <TouchableOpacity
                key={num}
                style={[
                  styles.diffButton, 
                  selectedDifficulties.includes(num) && styles.selectedDiff
                ]}
                onPress={() => toggleDifficulty(num)}
              >
                <Text style={styles.diffText}>{num}</Text>
              </TouchableOpacity>
            ))}
          </View>
          <Text style={styles.selectedDifficultiesText}>
            –í—ã–±—Ä–∞–Ω–æ: {selectedDifficulties.length > 0 ? selectedDifficulties.join(', ') : '–Ω–∏—á–µ–≥–æ'}
          </Text>
          <TouchableOpacity 
            style={[styles.confirmAddButton, selectedDifficulties.length === 0 && styles.disabledButton]} 
            onPress={addDish}
            disabled={selectedDifficulties.length === 0}
          >
            <Text style={styles.confirmAddText}>–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ */}
      {showDishesList && (
        <View style={styles.dishesSection}>
          <ScrollView style={styles.dishesList}>
            {dishes.map((dish, index) => (
              <View key={index} style={styles.dishItem}>
                <View style={styles.dishInfo}>
                  <Text style={styles.dishNameText}>{dish.name}</Text>
                  <Text style={styles.dishDifficulty}>
                    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {dish.difficulties.join(', ')}
                  </Text>
                </View>
                <TouchableOpacity 
                  style={styles.deleteButton}
                  onPress={() => removeDish(index)}
                >
                  <Text style={styles.deleteText}>üóëÔ∏è</Text>
                </TouchableOpacity>
              </View>
            ))}
            {dishes.length === 0 && (
              <Text style={styles.emptyText}>–°–ø–∏—Å–æ–∫ –±–ª—é–¥ –ø—É—Å—Ç</Text>
            )}
          </ScrollView>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
  },
  subtitle: {
    fontSize: 18,
    marginBottom: 15,
    fontWeight: '600',
  },
  moodButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 20,
  },
  moodButton: {
    width: 45,
    height: 45,
    borderRadius: 22,
    backgroundColor: '#ddd',
    justifyContent: 'center',
    alignItems: 'center',
  },
  selectedMood: {
    backgroundColor: '#4CAF50',
  },
  moodText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  chooseButton: {
    backgroundColor: '#2196F3',
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
    marginBottom: 20,
  },
  disabledButton: {
    backgroundColor: '#ccc',
  },
  chooseText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  result: {
    padding: 20,
    backgroundColor: 'white',
    borderRadius: 10,
    alignItems: 'center',
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  resultTitle: {
    fontSize: 20,
    marginBottom: 10,
    fontWeight: '600',
  },
  dishName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4CAF50',
    textAlign: 'center',
  },
  difficulty: {
    fontSize: 16,
    color: '#666',
    marginTop: 5,
  },
  managementSection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 10,
  },
  managementButton: {
    flex: 1,
    backgroundColor: '#666',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginHorizontal: 5,
  },
  managementButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  resetButton: {
    backgroundColor: '#FF9800',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 15,
  },
  resetButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  addForm: {
    backgroundColor: 'white',
    padding: 15,
    borderRadius: 10,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 10,
    marginBottom: 10,
    fontSize: 16,
  },
  difficultyLabel: {
    fontSize: 16,
    marginBottom: 5,
    fontWeight: '600',
  },
  difficultyHint: {
    fontSize: 14,
    color: '#666',
    marginBottom: 10,
    fontStyle: 'italic',
  },
  difficultyButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 10,
  },
  diffButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#eee',
    justifyContent: 'center',
    alignItems: 'center',
  },
  selectedDiff: {
    backgroundColor: '#4CAF50',
  },
  diffText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  selectedDifficultiesText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginBottom: 15,
    fontStyle: 'italic',
  },
  confirmAddButton: {
    backgroundColor: '#4CAF50',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  confirmAddText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  dishesSection: {
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  dishesList: {
    maxHeight: 200,
  },
  dishItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  dishInfo: {
    flex: 1,
  },
  dishNameText: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
  },
  dishDifficulty: {
    fontSize: 14,
    color: '#666',
  },
  deleteButton: {
    padding: 8,
  },
  deleteText: {
    fontSize: 18,
  },
  emptyText: {
    textAlign: 'center',
    color: '#666',
    fontStyle: 'italic',
    padding: 20,
  },
});
